# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1csVpae0qFrLPgzZSWCDT0PfX46Np3eEY
"""

import pandas as pd
import requests
from datetime import datetime
import time
from IPython.display import display, HTML
import matplotlib.pyplot as plt

def alpha_vantage_hisse_verisi_cek(sembol, interval, api_key):
    print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] {sembol} verisi Ã§ekiliyor...")
    url = f"https://www.alphavantage.co/query"
    params = {
        "function": "TIME_SERIES_INTRADAY",
        "symbol": sembol,
        "interval": interval,
        "apikey": api_key,
        "outputsize": "compact"
    }

    response = requests.get(url, params=params)
    data = response.json()

    key = f"Time Series ({interval})"
    if key not in data:
        print("Veri alÄ±namadÄ±:", data.get("Note", data.get("Error Message", "Bilinmeyen hata")))
        return None

    df = pd.DataFrame.from_dict(data[key], orient='index')
    df.columns = ["Open", "High", "Low", "Close", "Volume"]
    df = df.astype(float)
    df.index = pd.to_datetime(df.index)
    df = df.sort_index()
    return df

def hesapla_indikatorler(df):
    close = df["Close"]
    ema12 = close.ewm(span=12, adjust=False).mean()
    ema26 = close.ewm(span=26, adjust=False).mean()
    macd = ema12 - ema26
    signal = macd.ewm(span=9, adjust=False).mean()

    delta = close.diff()
    gain = delta.clip(lower=0)
    loss = -delta.clip(upper=0)
    avg_gain = gain.rolling(14).mean()
    avg_loss = loss.rolling(14).mean()
    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))

    ma20 = close.rolling(20).mean()

    df["MACD"] = macd
    df["Signal"] = signal
    df["RSI"] = rsi
    df["MA20"] = ma20

    return df

def al_sat_fikri(df):
    son_kapanis = df["Close"].iloc[-1]
    son_macd = df["MACD"].iloc[-1]
    son_signal = df["Signal"].iloc[-1]
    son_rsi = df["RSI"].iloc[-1]
    son_ma20 = df["MA20"].iloc[-1]

    fikirler = []

    if son_macd > son_signal:
        fikirler.append("ðŸ“ˆ MACD: Al sinyali")
    else:
        fikirler.append("ðŸ“‰ MACD: Sat sinyali")

    if son_rsi < 30:
        fikirler.append("ðŸŸ¢ RSI: AÅŸÄ±rÄ± satÄ±m â†’ AL")
    elif son_rsi > 70:
        fikirler.append("ðŸ”´ RSI: AÅŸÄ±rÄ± alÄ±m â†’ SAT")
    else:
        fikirler.append("âšª RSI: NÃ¶tr")

    if son_kapanis > son_ma20:
        fikirler.append("ðŸŸ¢ Fiyat MA20 Ã¼stÃ¼nde â†’ AL")
    else:
        fikirler.append("ðŸ”´ Fiyat MA20 altÄ±nda â†’ SAT")

    return fikirler

def tabloyu_goster(df):
    df_show = df[["Open", "High", "Low", "Close"]].tail(6).copy()
    df_show.index.name = "Zaman"
    display(HTML("<h4 style='color:#004080;'>ðŸ“Š Son 1 Saatlik Fiyat Verileri:</h4>"))
    styled_df = df_show.style.set_table_attributes("style='display:inline'")\
        .set_caption("Son Veriler")\
        .format("{:.2f}")\
        .set_properties(**{'font-weight': 'bold'}, subset=pd.IndexSlice[:, ["Open", "High", "Low", "Close"]])
    display(styled_df)

def fikirleri_goster(fikirler):
    display(HTML("<h3 style='color:#006400;'>ðŸ“Œ AL / SAT Fikri:</h3>"))
    for fikir in fikirler:
        renk = "#007700" if "AL" in fikir else "#BB0000" if "SAT" in fikir else "#000000"
        display(HTML(f"<p style='font-size:16px; color:{renk}; font-weight:bold;'>{fikir}</p>"))

# Parametreler
api_key = "YOUR_ALPHA_VANTAGE_API_KEY"
sembol = "TSLA"
interval = "60min"

# Veri Ã§ekme
df = alpha_vantage_hisse_verisi_cek(sembol, interval, api_key)

if df is not None:
    df = hesapla_indikatorler(df)
    son_df = df.last("6H").copy()
    tabloyu_goster(son_df)
    fikirler = al_sat_fikri(son_df)
    fikirleri_goster(fikirler)